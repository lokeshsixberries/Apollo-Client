{"ast":null,"code":"import \"../../utilities/globals/index.js\";\nimport { useState, useRef, useEffect } from 'react';\nimport { equal } from '@wry/equality';\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useSubscription(subscription, options) {\n  var client = useApolloClient(options === null || options === void 0 ? void 0 : options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n\n  var _a = useState({\n    loading: !(options === null || options === void 0 ? void 0 : options.skip),\n    error: void 0,\n    data: void 0,\n    variables: options === null || options === void 0 ? void 0 : options.variables\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var _b = useState(function () {\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options === null || options === void 0 ? void 0 : options.variables,\n      fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n      context: options === null || options === void 0 ? void 0 : options.context\n    });\n  }),\n      observable = _b[0],\n      setObservable = _b[1];\n\n  var ref = useRef({\n    client: client,\n    subscription: subscription,\n    options: options\n  });\n  useEffect(function () {\n    var _a, _b, _c, _d;\n\n    var shouldResubscribe = options === null || options === void 0 ? void 0 : options.shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options);\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.skip) {\n      if (!(options === null || options === void 0 ? void 0 : options.skip) !== !((_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.skip)) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n        setObservable(null);\n      }\n    } else if (shouldResubscribe !== false && (client !== ref.current.client || subscription !== ref.current.subscription || (options === null || options === void 0 ? void 0 : options.fetchPolicy) !== ((_b = ref.current.options) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || !(options === null || options === void 0 ? void 0 : options.skip) !== !((_c = ref.current.options) === null || _c === void 0 ? void 0 : _c.skip) || !equal(options === null || options === void 0 ? void 0 : options.variables, (_d = ref.current.options) === null || _d === void 0 ? void 0 : _d.variables))) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options === null || options === void 0 ? void 0 : options.variables\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options === null || options === void 0 ? void 0 : options.variables,\n        fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,\n        context: options === null || options === void 0 ? void 0 : options.context\n      }));\n    }\n\n    Object.assign(ref.current, {\n      client: client,\n      subscription: subscription,\n      options: options\n    });\n  }, [client, subscription, options]);\n  useEffect(function () {\n    if (!observable) {\n      return;\n    }\n\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n\n        var result = {\n          loading: false,\n          data: fetchResult.data,\n          error: void 0,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        };\n        setResult(result);\n        (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onSubscriptionData) === null || _b === void 0 ? void 0 : _b.call(_a, {\n          client: client,\n          subscriptionData: result\n        });\n      },\n      error: function (error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: error,\n          variables: options === null || options === void 0 ? void 0 : options.variables\n        });\n      },\n      complete: function () {\n        var _a, _b;\n\n        (_b = (_a = ref.current.options) === null || _a === void 0 ? void 0 : _a.onSubscriptionComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n      }\n    });\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n  return result;\n}","map":{"version":3,"mappings":"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","names":["useState","useRef","useEffect","equal","DocumentType","verifyDocumentType","useApolloClient","useSubscription","subscription","options","client","Subscription","loading","skip","error","data","variables","result","setResult","subscribe","query","fetchPolicy","context","observable","setObservable","ref","shouldResubscribe","current","_a","_b","_c","_d","Object","assign","next","fetchResult","onSubscriptionData","subscriptionData","complete","onSubscriptionComplete","unsubscribe"],"sources":["/home/hp/apolloclient/node_modules/@apollo/src/react/hooks/useSubscription.ts"],"sourcesContent":["import '../../utilities/globals';\nimport { useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\nimport { equal } from '@wry/equality';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport {\n  SubscriptionHookOptions,\n  SubscriptionResult\n} from '../types/types';\nimport { OperationVariables } from '../../core';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>,\n) {\n  const client = useApolloClient(options?.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  const [result, setResult] = useState<SubscriptionResult<TData>>({\n    loading: !options?.skip,\n    error: void 0,\n    data: void 0,\n    variables: options?.variables,\n  });\n\n  const [observable, setObservable] = useState(() => {\n    if (options?.skip) {\n      return null;\n    }\n\n    return client.subscribe({\n      query: subscription,\n      variables: options?.variables,\n      fetchPolicy: options?.fetchPolicy,\n      context: options?.context,\n    });\n  });\n\n  const ref = useRef({ client, subscription, options });\n  useEffect(() => {\n    let shouldResubscribe = options?.shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(options!);\n    }\n\n    if (options?.skip) {\n      if (!options?.skip !== !ref.current.options?.skip) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error: void 0,\n          variables: options?.variables,\n        });\n        setObservable(null);\n      }\n    } else if (\n      shouldResubscribe !== false && (\n        client !== ref.current.client ||\n        subscription !== ref.current.subscription ||\n        options?.fetchPolicy !== ref.current.options?.fetchPolicy ||\n        !options?.skip !== !ref.current.options?.skip ||\n        !equal(options?.variables, ref.current.options?.variables)\n      )\n    ) {\n      setResult({\n        loading: true,\n        data: void 0,\n        error: void 0,\n        variables: options?.variables,\n      });\n      setObservable(client.subscribe({\n        query: subscription,\n        variables: options?.variables,\n        fetchPolicy: options?.fetchPolicy,\n        context: options?.context,\n      }));\n    }\n\n    Object.assign(ref.current, { client, subscription, options });\n  }, [client, subscription, options]);\n\n  useEffect(() => {\n    if (!observable) {\n      return;\n    }\n\n    const subscription = observable.subscribe({\n      next(fetchResult) {\n        const result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data!,\n          error: void 0,\n          variables: options?.variables,\n        };\n        setResult(result);\n\n        ref.current.options?.onSubscriptionData?.({\n          client,\n          subscriptionData: result\n        });\n      },\n      error(error) {\n        setResult({\n          loading: false,\n          data: void 0,\n          error,\n          variables: options?.variables,\n        });\n      },\n      complete() {\n        ref.current.options?.onSubscriptionComplete?.();\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [observable]);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}